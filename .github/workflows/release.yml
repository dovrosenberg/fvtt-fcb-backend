name: Release and Deploy to Google Cloud Run

on:
  pull_request:
    branches:
      - main
      - dev
    types:
      - closed  # Runs only when a PR is closed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true  # Ensures the PR was merged, not just closed
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Version from package.json
        id: version
        run: |
          # Get version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Add -beta suffix if merging to dev branch
          if [[ "${{ github.base_ref }}" == "dev" ]]; then
            NEW_VERSION="${NEW_VERSION}-beta"
          fi
          
          NEW_TAG="v$NEW_VERSION"
          
          echo "Using version from package.json: $NEW_VERSION"

          # create the image tag
          # Cloud Run is unable to reliably use the 'latest' tag, so we have to produce a new script that uses a specific image
          TIMESTAMP=$(date +%s)
          IMAGE_TAG="$NEW_TAG-$TIMESTAMP"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          # Output the version
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Using version $NEW_VERSION from package.json"

      - name: Verify package.json Version
        run: |
          echo "Using package.json version: ${{ env.NEW_VERSION }}"
          # No need to update package.json as we're using its version

      - name: Create Release Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
  
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "drosenberg62" --password-stdin

      - name: Build and Push Docker Image to Docker Hub
        run: |
          IMAGE_NAME=docker.io/drosenberg62/fvtt-fcb-backend:${{ env.IMAGE_TAG }}
          docker build --no-cache -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Replace Image Tag in Deploy Script
        run: |
            sed -i "s|REPLACE_IMAGE_TAG|${{ env.IMAGE_TAG }}|g" artifacts/deploy-gcp.sh

      - name: Replace Image Tag in Deploy Script 2
        run: |
          sed -i "s|REPLACE_IMAGE_TAG|${{ env.IMAGE_TAG }}|g" artifacts/deploy-gcp.ps1

      - name: Upload Deployment Script and Environment Template to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          draft: false
      
      - name: Upload Deployment Script and Environment Template to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          draft: false
          prerelease: ${{ github.base_ref == 'dev' }}
          files: |
            artifacts/deploy-gcp.ps1
            artifacts/deploy-gcp.sh
            artifacts/env.template