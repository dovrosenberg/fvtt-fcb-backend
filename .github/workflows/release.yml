name: Release and Deploy to Google Cloud Run

on:
  pull_request:
    branches:
      - main
    types:
      - closed  # Runs only when a PR is closed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true  # Ensures the PR was merged, not just closed
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get Latest Version & Bump Patch
        id: version
        run: |
          # Ensure we have all tags
          git fetch --tags

          # Get the latest tag (fallback to v0.0.0 if none exist)
          CURRENT_VERSION=$(git tag --list | sort -V | tail -n 1)

          # If no tags exist, start at v0.0.0
          if [[ -z "$CURRENT_VERSION" ]]; then
            CURRENT_VERSION="v0.0.0"
          fi
          
          echo Current version found - $CURRENT_VERSION

          # Remove "v" prefix for processing
          CURRENT_VERSION=${CURRENT_VERSION#v}

          # Extract major, minor, and patch numbers
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment patch version
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          NEW_TAG="v$NEW_VERSION"

          # Output the new version
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Bumped version to $NEW_VERSION"

      - name: Update `package.json` Version (If Applicable)
        run: |
          echo "Updating package.json version to ${{ env.NEW_VERSION }}"
          jq ".version = \"${{ env.NEW_VERSION }}\"" package.json > temp.json && mv temp.json package.json
          git add package.json

      - name: Commit & Push Version Bump
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Bump version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
          git tag ${{ env.NEW_TAG }}
          git push origin main --tags

      - name: Replace Image Tag in Deploy Script
        run: |
          sed -i "s|REPLACE_IMAGE_TAG|${{ env.NEW_VERSION }}|g" artifacts/deploy-gcp.sh

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
  
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "drosenberg62" --password-stdin

      # Cloud Run is unable to reliably use the 'latest' tag, so we have to produce a new script that uses a specific image
      - name: Generate Unique Image Tag with Release Name
        run: |
          TIMESTAMP=$(date +%s)
          IMAGE_TAG="${{ env.NEW_TAG }}-${TIMESTAMP}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Docker Image to Docker Hub
        run: |
          IMAGE_NAME=docker.io/drosenberg62/fvtt-fcb-backend:${{ env.IMAGE_TAG }}
          docker build --no-cache -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Replace Image Tag in Deploy Script
        run: |
            sed -i "s|REPLACE_IMAGE_TAG|${{ env.IMAGE_TAG }}|g" artifacts/deploy-gcp.sh

      - name: Upload Deployment Script and Environment Template to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          draft: false
          prerelease: false
          files: |
            artifacts/deploy-gcp.sh
            artifacts/env.template